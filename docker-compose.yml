
services:
  # Base de donn√©es PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: brandmonitor_db
    environment:
      POSTGRES_USER: brandmonitor
      POSTGRES_PASSWORD: brandmonitor_password
      POSTGRES_DB: brandmonitor
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brandmonitor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour cache
  redis:
    image: redis:7-alpine
    container_name: brandmonitor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brandmonitor_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://brandmonitor:brandmonitor_password@db:5432/brandmonitor
      - REDIS_URL=redis://redis:6379
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - DEBUG=true
    volumes:
      - ./backend/app:/app/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend (serveur HTTP simple)
  frontend:
    image: nginx:alpine
    container_name: brandmonitor_frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: brandmonitor_network